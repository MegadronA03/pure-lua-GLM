local a={}local b={}local c={function(d)if type(d)~="number"then error("glmvec: expected number or table with numbers",2)end end,function(d,e)if#d>e then error("glmvec: too many arguments",2)end end}local f=function(g,...)c[g](...)end;local h=function(i,j)for e,k in pairs(j)do i[e]=k end end;local l=function(m,n)local o={}if type(m)=="table"then f(1,m[1])f(1,m[2])o=m else f(1,m)n=n or m;f(1,n)o={m,n}end;h(o,b[1])return setmetatable(o,a[1])end;local p=function(...)local o={}local q={...}for e,k in ipairs(q)do if#o<3 then if type(k)=="table"then for r,s in ipairs(k)do f(1,s)o[#o+1]=s end else f(1,k)o[#o+1]=k end else if#o==3 then f(2,q,e)else local t=""for e,k in pairs(q)do t=t..tostring(e)..": "..tostring(k).."\n"end;error("glmvec: argument missmatch v:\n"..errstr.."\ninput:\n"..t,2)end end end;if#o==1 then o={o[1],o[1],o[1]}end;h(o,b[2])return setmetatable(o,a[2])end;local u=function(...)local o={}local q={...}for e,k in pairs(q)do if#o<4 then if type(k)=="table"then for r,s in ipairs(k)do o[#o+1]=s end else f(1,k)o[#o+1]=k end else if#o==4 then f(2,q,e)end;local t=""for v,w in pairs(q)do t=t..tostring(v)..": "..tostring(w).."\n"end;error("glmvec: argument missmatch v:\n"..errstr.."\ninput:\n"..t,2)end end;if#o==1 then o={o[1],o[1],o[1],o[1]}end;h(o,b[3])return setmetatable(o,a[3])end;local x={vec2=l,vec3=p,vec4=u}local y={vec2=l,vec3=p,vec4=u,type=type,rawset=rawset,rawget=rawget,math=math}local function z(m)return m end;local A="+-*/"local B="xyzw"local C="rgba"local D=debug.getmetatable(0)or{}local E={"__add","__sub","__mul","__div"}for F=1,4 do local G=A:sub(F,F)D[E[F]]=load("return function(a,b)if type(b)=='table'then for i,e in ipairs(b) do b[i]=a"..G.."e end return b else return a"..G.."b end end")()end;debug.setmetatable(0,D)local H=function(I)local J="a[1] %s c[1]"local K=tostring(I)local L=""local M=""local N=""for e=2,I do local O=tostring(e)J=J..",a["..O.."] %s c["..O.."]"L=L.."','..v["..O.."].."M=M.."+v["..O.."]*v["..O.."]"N=N..string.format(",%s=%s,%s=%s",B:sub(e,e),O,C:sub(e,e),O)end;local P=string.format("return function(a,b)local c = vec%s(b);return vec%s(%s)end",K,K,J)local Q={}for F=1,4 do local G=A:sub(F,F)Q[F]=load(string.format(P,G,G,G,G),"vec"..K..":"..E[F],'t',y)()end;local R=load("return function(v)return math.sqrt(v[1]*v[1]"..M..")end","vec"..K..":lenght",'t',y)()local S=load("local vecconv={pass, vec2, vec3, vec4};return function(t,k)if type(k)=='string'then local vt={}if#k>4then error('glmvec: Invalid vector type'..tostring(#k),2)end local ds={x=1,r=1"..N.."}for i=1,#k do local c=k:sub(i,i);vt[i]=rawget(t,ds[c])end return vecconv[#vt](vt)elseif type(k)=='number'then return rawget(t,k)else error('glmvec: invalid index type',2)end end","vec"..K..":__index",'t',y)()local T=load("return function(t,k,v)if type(k)=='string'then if(#k<="..K..")then local ds={x=1,r=1"..N.."}if type(v)=='table'then if(#k==#v)then for i=1,#k do local c=k:sub(i,i);rawset(t,ds[c],v[i])end else error('glmvec: data length missmatch',2)end elseif type(v)=='number'then for i=1,#k do local c=k:sub(i,i);rawset(t,ds[c],v)end end else error('glmvec: invalid type',2)end elseif type(k)=='number'then rawset(t,k,v)else error('glmvec: invalid index type',2)end end","vec"..K..":__newindex",'t',y)()return{__add=Q[1],__sub=Q[2],__mul=Q[3],__div=Q[4],__tostring=load("return function(v)return '<'..v[1].."..L.."'>' end","vec"..K..":tostring",'t',y)(),__index=S,__newindex=T,__pairs=function(o)local e,U,V;return function()e,U=next(o,e)if e then V=B:sub(e,e)return V,U else return end end end,__ipairs=function(o)local e=0;return function()e=e+1;local U=o[e]if U then return e,U else return end end end},{_type="vec"..K,dot=function(F,W)local j=F*W;return j[1]+j[2]end,length=R,normalize=function(o)local X=1/R(o)return o*X end}end;for e=1,3 do a[e],b[e]=H(e+1)end;b[2].cross=function(F,W)return p(F.y*W.z-F.z*W.y,F.z*W.x-F.x*W.z,F.x*W.y-F.y*W.x)end;return x